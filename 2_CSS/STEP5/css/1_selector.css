body {
    padding-bottom: 300px;
}
.tagSelector h1 {
    color: #0c0; font-size: 20px;
}
.tagSelector p {
    color: #0cf; font-size: 15px;
}
.tagSelector span {
    color: #336; font-size: 20px;
}
/* tag Selector */

.idSelector #paragraph1 {
    text-decoration: underline;
}
.idSelector #paragraph2 {
    text-decoration: line-through;
}
.idSelector #paragraph3 {
    text-decoration: overline;
}
/* id Selector */

.classSelector .f_size {
    font-size: 20px;
}
.classSelector .f_weight {
    font-weight: bold;
}
.classSelector .f_color {
    color: steelblue;
}
/* 
    * class Selector
    *   -> html에서 class에 띄어쓰기를 하면 다수 class를 지정할 수 있음

*/
.classSelector .f_size.f_weight.f_color {
    font-size: 25px;
    font-weight: normal;
    color: red;
}
/* 
    * class를 선언할 때 공백 없이 사용하게 되면 이 class를 모두 가지고 있는 tag에만 css를 적용
*/

.attrSelector fieldset {
    border: 1px solid #555; background-color: steelblue;
}
.attrSelector fieldset legend {
    border: 1px solid #555; background-color: slateblue; color: mediumturquoise;
    padding: 10px; border-radius: 10px;
}
.attrSelector fieldset ul {
    margin: 0; padding: 0; list-style: none;
}
.attrSelector fieldset ul li {
    font-size: 14px; line-height: 30px;
}
.attrSelector fieldset ul li label,
.attrSelector fieldset ul li input {
    vertical-align: middle; display: inline-block;
}
.attrSelector fieldset ul li input[type="text"] {
    background-color: burlywood; border: 1px solid #f00;
}
.attrSelector fieldset ul li input[type="password"] {
    background-color: lightblue; border: 1px solid goldenrod;
}
.attrSelector fieldset ul li input[type="radio"] {
    width: 25px; height: 25px;
}
/* 
    * attrSelector
    *   -> input[type="text"]처럼 attr의 value를 잡아서 지정할 수 있음
 */

.directSelector > h1 {
    font-size: 28px; color: slateblue;
}
.directSelector > span {
    font-size: 14px; color: saddlebrown;
}
/* 
    * '>'는 직계 라인에 있는 태그만 잡을 수 있는데 span같은 경우에는
    *   html에서 span 안에 span이 동일하게 적용 되어 그 안에 있는 span에 까지
    *   css가 적용된 것. 이것을 '버블현상'이라고 함(실무에서 굉장히 싫어함)
*/

.stringAttrSelector img[src$='png'] {
    width: 100px; height: 100px; border: 3px solid red;
}
.stringAttrSelector img[src$='gif'] {
    width: 200px; height: 200px; border: 3px solid green;
}
.stringAttrSelector img[src$='jpg'] {
    width: 300px; height: 300px; border: 3px solid blue;
}
.stringAttrSelector p[class^='border_'] {
    border-width: 5px;
    border-style: solid;
}
.stringAttrSelector p[class$='red'] {
    border-color: red;
}
.stringAttrSelector p[class$='green'] {
    border-color: green;
}
.stringAttrSelector p[class$='blue'] {
    border-color: blue;
}
/* 
    * tag[attr='value'] = tag의 attr에 적용되어 있는 value를 지정
    * tag[attr$='value'] = tag의 attr에 적용되어 있는 value로 끝나는 것을 모두 지정
    * tag[attr^='value'] = tag의 attr에 적용되어 있는 value로 시작하는 것을 모두 지정
    * tag[attr*='value'] = tag의 attr에 적용되어 있는 value가 들어있는 모든 것을 지정
*/

.sameSelector h1 + h2 {
    background-color: gray;
}
/* 
    * '+'는 바로 뒤에 있는 tag를 잡는 것
    *   -> div + p = div 바로 뒤에 있는 p를 잡는 것
*/

.sameSelector h3 ~ h2 {
    font-size: 34px; color: darkslateblue;
}
/* 
    * '~'은 뒤에 있는 모든 tag를 잡는 것
    *   -> div ~ p = div 뒤에 있는 모든 p를 잡는 것
*/

.activeSelector h1 {
    font-size: 12px; color: black;
}
.activeSelector h1:hover {
    font-size: 24px; color: darkgoldenrod; cursor: pointer;
}
/* 
    * cursor: pointer는 커서가 손가락 모양의 커서로 바뀜(버튼이라는 인식)
*/

.statusSelector input[type='checkbox'] + label {
    display: inline-block; vertical-align: middle;
    height: 25px; overflow-y: hidden;
    transition-duration: 0.75s;
}
.statusSelector input[type='checkbox']:checked + label {
    /* height: 0px; */
    color: red; font-size: 20px;
}
.statusSelector input[type='text']:enabled {
    background-color: black; color: white;
}
.statusSelector input[type='text']:disabled {
    background-color: deeppink; color: white;
}
.statusSelector input[type='text']::placeholder {
    color: white;
}
.normalSelector ul:after {
    content: ''; display: block; clear: both; visibility: hidden;
}
.normalSelector ul li {
    float: left; margin: 0; padding: 15px;
    list-style: none; border: 1px solid black;
}
.normalSelector ul li:first-child {
    border-radius: 30px 0 0 30px;
}
.normalSelector ul li:last-child {
    border-radius: 0 30px 30px 0;
}
.normalSelector ul li:nth-child(odd) {
    background-color: darkblue; color: white;
}
.normalSelector ul li:nth-child(even) {
    background-color: lightpink;
}

.shapeSelector :last-child {
    color: red;
}
.shapeSelector h2:nth-child(5) {
    color: #30f;
}
.shapeSelector h2:nth-of-type(2) {
    color: #30f;
}
.shapeSelector h3:nth-of-type(2) {
    color: #0f6;
}
/* 
    * nth-child는 선택된 tag의 부모 tag 기준으로 잡음
    * nth-of-type은 선택된 tag의 형제 tag 중 동일한 tag 순서 기준으로 잡음
*/

.textSelector h1:first-letter {
    font-size: 100px; color: #096;
}
/* 첫 글자만 선택 */
.textSelector p:first-line {
    color: #090; text-decoration: underline;
    font-size: 24px;
}
/* 첫 줄만 선택 */

.backandfrontSelector p{
    counter-increment: rint;
}
.backandfrontSelector p:before {
    content: counter(rint) ".";
}
/* 
    * counter-increment 속성에 내가 임의로 counter name을 정해준 뒤
    *   before 선택자 content에 counter() 함수를 사용하여 counter name을 넣고
    *   한 칸 띄고 "" 안에 내가 원하는 기호를 적으면 카운터 뒤에 기호를 마음대로 넣을 수 있음
*/

.backandfrontSelector p:after {
    content: '-' attr(data-page) "page";
    font-weight: bold; color: deeppink;
}

.notSelector input:not([type="text"]) {
    background-color: red;
}
/* 
    * class 선택자로 뺄 때 -> .notSelector input:not(.class)
    * id 선택자로 뺄 때 -> .notSelector input:not(#id) 
    * nth 속성 선택자로 뺄 때 -> .notSelector input:not(:first-child) 
*/