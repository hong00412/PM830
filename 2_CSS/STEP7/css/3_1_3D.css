body {
    width: 200px; margin: 200px auto;
}
div {
    width: 200px;
}
div span {
    width: 200px; height: 200px; display: block;
    animation-iteration-count: infinite;
    animation-duration: 10s;
    animation-timing-function: ease;
    
}
div.rotater span:nth-of-type(1) {
    background-color: red; animation-name: hori;
} 

@keyframes hori {
    from {
        transform: rotateX(0deg);
    }
    to {
        transform: rotateX(360deg);
    }
}

div.rotater span:nth-of-type(2) {
    background-color: green; animation-name: verti;
}

@keyframes verti {
    from {
        transform: rotateY(0deg);
    }
    to {
        transform: rotateY(360deg);
    }
}

div.rotater span:nth-of-type(3) {
    background-color: blue; animation-name: depth;
}

@keyframes depth {
    from {
        transform: rotateZ(0deg);
    }
    to {
        transform: rotateZ(360deg);
    }
}

div.rotater span:nth-of-type(4) {
    background-color: yellow; animation-name: rotate3D;
}

@keyframes rotate3D {
    from {
        transform: rotate3d(0, 0, 0, 0deg);
    }
    to {
        transform: rotate3D(1, 1, 1, 360deg);
    }
}
/* 
    * rotate3d(x축 힘, y축 힘, z축 힘, 회전각)
    *   -> 숫자를 아무리 높게 적어도 3축의 수가 같으면 1을 적든 10을 적든 똑같음(숫자가 높다고 더 세게 돌아가지 않음)
    *   -> rotate3d(5, 1, 1, 360deg)로 적으면 x축의 힘이 5 / y, z축의 힘은 1이기 때문에 x축으로 더 많이 돌아감
*/

div.translater span {
    background-color: salmon; animation-name: trans3D;
}
@keyframes trans3D {
    from {
        transform: rotate3d(0, 0, 0, 0deg) translate3d(0px, 0px, 0px) scale3d(0, 0, 0);
    }
    to {
        transform: rotate3d(1, 1, 1, 360deg) translate3d(100px, 300px, 150px) scale3d(1, 1, 1);
    }
}
/* 
    * translate3d(x축이동, y축이동, z축이동);
    *   -> 각 축의 값만큼 해당 축으로 이동한다.
    !   -> 단, z축은 깊이를 표현하기 때문에 단면 디스플레이 특성상 큰 차이를 보이지 못한다.
    !       scale3d가 원근을 조작해서 가까이 오는 것처럼 보여지게 할 수 있음
*/